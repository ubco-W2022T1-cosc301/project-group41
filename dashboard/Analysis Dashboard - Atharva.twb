<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20223.22.1005.1835                               -->
<workbook original-version='18.1' source-build='2022.3.0 (20223.22.1005.1835)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <SavingAnalyticObjects />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='Score_Series' inline='true' name='federated.132bzgr0q36ny91b21stw1p7ah76' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Score_Series' name='textscan.07ah1bd048atas1a01ck60kwvcmj'>
            <connection class='textscan' directory='C:/Users/athar/Documents/COSC 301/project-group41/data/processed' filename='Score_Series.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.07ah1bd048atas1a01ck60kwvcmj' name='Avg_DR.csv' table='[Avg_DR#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='real' name='AvgDR' ordinal='2' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='textscan.07ah1bd048atas1a01ck60kwvcmj' name='Score_Series.csv' table='[Score_Series#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='Country' ordinal='1' />
              <column datatype='real' name='2015 Score' ordinal='2' />
              <column datatype='real' name='2016 Score' ordinal='3' />
              <column datatype='real' name='2017 Score' ordinal='4' />
            </columns>
          </relation>
          <relation connection='textscan.07ah1bd048atas1a01ck60kwvcmj' name='Avg_DR.csv' table='[Avg_DR#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='Country' ordinal='1' />
              <column datatype='real' name='AvgDR' ordinal='2' />
            </columns>
          </relation>
          <relation connection='textscan.07ah1bd048atas1a01ck60kwvcmj' name='GDP_Series.csv' table='[GDP_Series#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='Country' ordinal='1' />
              <column datatype='real' name='2015 GDP' ordinal='2' />
              <column datatype='real' name='2016 GDP' ordinal='3' />
              <column datatype='real' name='2017 GDP' ordinal='4' />
            </columns>
          </relation>
          <relation connection='textscan.07ah1bd048atas1a01ck60kwvcmj' name='Trust_Series.csv' table='[Trust_Series#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='Country' ordinal='1' />
              <column datatype='real' name='2015 Trust' ordinal='2' />
              <column datatype='real' name='2016 Trust' ordinal='3' />
              <column datatype='real' name='2017 Trust' ordinal='4' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[2015 GDP]' value='[GDP_Series.csv].[2015 GDP]' />
          <map key='[2015 Score]' value='[Score_Series.csv].[2015 Score]' />
          <map key='[2015 Trust]' value='[Trust_Series.csv].[2015 Trust]' />
          <map key='[2016 GDP]' value='[GDP_Series.csv].[2016 GDP]' />
          <map key='[2016 Score]' value='[Score_Series.csv].[2016 Score]' />
          <map key='[2016 Trust]' value='[Trust_Series.csv].[2016 Trust]' />
          <map key='[2017 GDP]' value='[GDP_Series.csv].[2017 GDP]' />
          <map key='[2017 Score]' value='[Score_Series.csv].[2017 Score]' />
          <map key='[2017 Trust]' value='[Trust_Series.csv].[2017 Trust]' />
          <map key='[AvgDR]' value='[Avg_DR.csv].[AvgDR]' />
          <map key='[Country (Avg_DR.csv)]' value='[Avg_DR.csv].[Country]' />
          <map key='[Country (GDP_Series.csv)]' value='[GDP_Series.csv].[Country]' />
          <map key='[Country (Trust_Series.csv)]' value='[Trust_Series.csv].[Country]' />
          <map key='[Country]' value='[Score_Series.csv].[Country]' />
          <map key='[F1 (Avg_DR.csv)]' value='[Avg_DR.csv].[F1]' />
          <map key='[F1 (GDP_Series.csv)]' value='[GDP_Series.csv].[F1]' />
          <map key='[F1 (Trust_Series.csv)]' value='[Trust_Series.csv].[F1]' />
          <map key='[F1]' value='[Score_Series.csv].[F1]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Score_Series.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Avg_DR.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[GDP_Series.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Trust_Series.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[Score_Series.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Score_Series.csv_16177F07F7F14F5B94730378A4E8D6E9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Score_Series.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Score_Series.csv_16177F07F7F14F5B94730378A4E8D6E9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2015 Score</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2015 Score]</local-name>
            <parent-name>[Score_Series.csv]</parent-name>
            <remote-alias>2015 Score</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Score_Series.csv_16177F07F7F14F5B94730378A4E8D6E9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2016 Score</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2016 Score]</local-name>
            <parent-name>[Score_Series.csv]</parent-name>
            <remote-alias>2016 Score</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Score_Series.csv_16177F07F7F14F5B94730378A4E8D6E9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2017 Score</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2017 Score]</local-name>
            <parent-name>[Score_Series.csv]</parent-name>
            <remote-alias>2017 Score</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Score_Series.csv_16177F07F7F14F5B94730378A4E8D6E9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1 (Avg_DR.csv)]</local-name>
            <parent-name>[Avg_DR.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Avg_DR.csv_81DB62E141094E0C9ECCD521C52E46E8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country (Avg_DR.csv)]</local-name>
            <parent-name>[Avg_DR.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Avg_DR.csv_81DB62E141094E0C9ECCD521C52E46E8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AvgDR</remote-name>
            <remote-type>5</remote-type>
            <local-name>[AvgDR]</local-name>
            <parent-name>[Avg_DR.csv]</parent-name>
            <remote-alias>AvgDR</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Avg_DR.csv_81DB62E141094E0C9ECCD521C52E46E8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1 (GDP_Series.csv)]</local-name>
            <parent-name>[GDP_Series.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_Series.csv_E8B03F222BA24528898960F558AAD6A6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country (GDP_Series.csv)]</local-name>
            <parent-name>[GDP_Series.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_Series.csv_E8B03F222BA24528898960F558AAD6A6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2015 GDP</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2015 GDP]</local-name>
            <parent-name>[GDP_Series.csv]</parent-name>
            <remote-alias>2015 GDP</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_Series.csv_E8B03F222BA24528898960F558AAD6A6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2016 GDP</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2016 GDP]</local-name>
            <parent-name>[GDP_Series.csv]</parent-name>
            <remote-alias>2016 GDP</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_Series.csv_E8B03F222BA24528898960F558AAD6A6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2017 GDP</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2017 GDP]</local-name>
            <parent-name>[GDP_Series.csv]</parent-name>
            <remote-alias>2017 GDP</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_Series.csv_E8B03F222BA24528898960F558AAD6A6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1 (Trust_Series.csv)]</local-name>
            <parent-name>[Trust_Series.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Trust_Series.csv_A0AD50FCCF144EDCB2B4D3F8711EAA52]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country (Trust_Series.csv)]</local-name>
            <parent-name>[Trust_Series.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Trust_Series.csv_A0AD50FCCF144EDCB2B4D3F8711EAA52]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2015 Trust</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2015 Trust]</local-name>
            <parent-name>[Trust_Series.csv]</parent-name>
            <remote-alias>2015 Trust</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Trust_Series.csv_A0AD50FCCF144EDCB2B4D3F8711EAA52]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2016 Trust</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2016 Trust]</local-name>
            <parent-name>[Trust_Series.csv]</parent-name>
            <remote-alias>2016 Trust</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Trust_Series.csv_A0AD50FCCF144EDCB2B4D3F8711EAA52]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2017 Trust</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2017 Trust]</local-name>
            <parent-name>[Trust_Series.csv]</parent-name>
            <remote-alias>2017 Trust</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Trust_Series.csv_A0AD50FCCF144EDCB2B4D3F8711EAA52]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='2015 Gdp' datatype='real' name='[2015 GDP]' role='measure' type='quantitative' />
      <column datatype='real' name='[2015 Score]' role='measure' type='quantitative' />
      <column datatype='real' name='[2015 Trust]' role='measure' type='quantitative' />
      <column caption='2016 Gdp' datatype='real' name='[2016 GDP]' role='measure' type='quantitative' />
      <column datatype='real' name='[2016 Score]' role='measure' type='quantitative' />
      <column datatype='real' name='[2016 Trust]' role='measure' type='quantitative' />
      <column caption='2017 Gdp' datatype='real' name='[2017 GDP]' role='measure' type='quantitative' />
      <column datatype='real' name='[2017 Score]' role='measure' type='quantitative' />
      <column datatype='real' name='[2017 Trust]' role='measure' type='quantitative' />
      <column caption='Avg DR' datatype='real' name='[AvgDR]' role='measure' type='quantitative' />
      <column caption='Country (Avg DR.csv)' datatype='string' name='[Country (Avg_DR.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Country (GDP Series.csv)' datatype='string' name='[Country (GDP_Series.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Country (Trust Series.csv)' datatype='string' name='[Country (Trust_Series.csv)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Happiness Bracket' datatype='string' name='[Country (clusters)]' parent-model='[AnalyticModel:{f7e5a7a5-cd9d-45b8-8a0c-cbd4d3af0746}]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <calculation class='categorical-bin' column='[Country]' new-bin='true'>
          <bin default-name='false' value='&quot;Happy&quot;'>
            <value>&quot;Argentina&quot;</value>
            <value>&quot;Australia&quot;</value>
            <value>&quot;Austria&quot;</value>
            <value>&quot;Belgium&quot;</value>
            <value>&quot;Brazil&quot;</value>
            <value>&quot;Canada&quot;</value>
            <value>&quot;Chile&quot;</value>
            <value>&quot;Colombia&quot;</value>
            <value>&quot;Costa Rica&quot;</value>
            <value>&quot;Czech Republic&quot;</value>
            <value>&quot;Denmark&quot;</value>
            <value>&quot;Finland&quot;</value>
            <value>&quot;France&quot;</value>
            <value>&quot;Germany&quot;</value>
            <value>&quot;Guatemala&quot;</value>
            <value>&quot;Iceland&quot;</value>
            <value>&quot;Ireland&quot;</value>
            <value>&quot;Israel&quot;</value>
            <value>&quot;Luxembourg&quot;</value>
            <value>&quot;Malta&quot;</value>
            <value>&quot;Mexico&quot;</value>
            <value>&quot;Netherlands&quot;</value>
            <value>&quot;New Zealand&quot;</value>
            <value>&quot;Norway&quot;</value>
            <value>&quot;Panama&quot;</value>
            <value>&quot;Qatar&quot;</value>
            <value>&quot;Saudi Arabia&quot;</value>
            <value>&quot;Singapore&quot;</value>
            <value>&quot;Spain&quot;</value>
            <value>&quot;Sweden&quot;</value>
            <value>&quot;Switzerland&quot;</value>
            <value>&quot;Thailand&quot;</value>
            <value>&quot;United Arab Emirates&quot;</value>
            <value>&quot;United Kingdom&quot;</value>
            <value>&quot;United States&quot;</value>
            <value>&quot;Uruguay&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Satisfied&quot;'>
            <value>&quot;Algeria&quot;</value>
            <value>&quot;Azerbaijan&quot;</value>
            <value>&quot;Bahrain&quot;</value>
            <value>&quot;Belarus&quot;</value>
            <value>&quot;Bhutan&quot;</value>
            <value>&quot;Bolivia&quot;</value>
            <value>&quot;Bosnia and Herzegovina&quot;</value>
            <value>&quot;China&quot;</value>
            <value>&quot;Croatia&quot;</value>
            <value>&quot;Cyprus&quot;</value>
            <value>&quot;Dominican Republic&quot;</value>
            <value>&quot;Ecuador&quot;</value>
            <value>&quot;El Salvador&quot;</value>
            <value>&quot;Estonia&quot;</value>
            <value>&quot;Greece&quot;</value>
            <value>&quot;Honduras&quot;</value>
            <value>&quot;Hungary&quot;</value>
            <value>&quot;Indonesia&quot;</value>
            <value>&quot;Italy&quot;</value>
            <value>&quot;Jamaica&quot;</value>
            <value>&quot;Japan&quot;</value>
            <value>&quot;Jordan&quot;</value>
            <value>&quot;Kazakhstan&quot;</value>
            <value>&quot;Kosovo&quot;</value>
            <value>&quot;Kuwait&quot;</value>
            <value>&quot;Kyrgyzstan&quot;</value>
            <value>&quot;Latvia&quot;</value>
            <value>&quot;Lebanon&quot;</value>
            <value>&quot;Libya&quot;</value>
            <value>&quot;Lithuania&quot;</value>
            <value>&quot;Macedonia&quot;</value>
            <value>&quot;Malaysia&quot;</value>
            <value>&quot;Mauritius&quot;</value>
            <value>&quot;Moldova&quot;</value>
            <value>&quot;Mongolia&quot;</value>
            <value>&quot;Montenegro&quot;</value>
            <value>&quot;Morocco&quot;</value>
            <value>&quot;Nicaragua&quot;</value>
            <value>&quot;Nigeria&quot;</value>
            <value>&quot;North Cyprus&quot;</value>
            <value>&quot;Pakistan&quot;</value>
            <value>&quot;Paraguay&quot;</value>
            <value>&quot;Peru&quot;</value>
            <value>&quot;Philippines&quot;</value>
            <value>&quot;Poland&quot;</value>
            <value>&quot;Portugal&quot;</value>
            <value>&quot;Romania&quot;</value>
            <value>&quot;Russia&quot;</value>
            <value>&quot;Serbia&quot;</value>
            <value>&quot;Slovakia&quot;</value>
            <value>&quot;Slovenia&quot;</value>
            <value>&quot;South Korea&quot;</value>
            <value>&quot;Tajikistan&quot;</value>
            <value>&quot;Trinidad and Tobago&quot;</value>
            <value>&quot;Tunisia&quot;</value>
            <value>&quot;Turkey&quot;</value>
            <value>&quot;Turkmenistan&quot;</value>
            <value>&quot;Uzbekistan&quot;</value>
            <value>&quot;Venezuela&quot;</value>
            <value>&quot;Vietnam&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Unhappy&quot;'>
            <value>&quot;Afghanistan&quot;</value>
            <value>&quot;Albania&quot;</value>
            <value>&quot;Angola&quot;</value>
            <value>&quot;Armenia&quot;</value>
            <value>&quot;Bangladesh&quot;</value>
            <value>&quot;Benin&quot;</value>
            <value>&quot;Botswana&quot;</value>
            <value>&quot;Bulgaria&quot;</value>
            <value>&quot;Burkina Faso&quot;</value>
            <value>&quot;Burundi&quot;</value>
            <value>&quot;Cambodia&quot;</value>
            <value>&quot;Cameroon&quot;</value>
            <value>&quot;Chad&quot;</value>
            <value>&quot;Congo (Brazzaville)&quot;</value>
            <value>&quot;Congo (Kinshasa)&quot;</value>
            <value>&quot;Egypt&quot;</value>
            <value>&quot;Ethiopia&quot;</value>
            <value>&quot;Gabon&quot;</value>
            <value>&quot;Georgia&quot;</value>
            <value>&quot;Ghana&quot;</value>
            <value>&quot;Guinea&quot;</value>
            <value>&quot;Haiti&quot;</value>
            <value>&quot;India&quot;</value>
            <value>&quot;Iran&quot;</value>
            <value>&quot;Iraq&quot;</value>
            <value>&quot;Ivory Coast&quot;</value>
            <value>&quot;Kenya&quot;</value>
            <value>&quot;Liberia&quot;</value>
            <value>&quot;Madagascar&quot;</value>
            <value>&quot;Malawi&quot;</value>
            <value>&quot;Mali&quot;</value>
            <value>&quot;Mauritania&quot;</value>
            <value>&quot;Myanmar&quot;</value>
            <value>&quot;Nepal&quot;</value>
            <value>&quot;Niger&quot;</value>
            <value>&quot;Palestinian Territories&quot;</value>
            <value>&quot;Rwanda&quot;</value>
            <value>&quot;Senegal&quot;</value>
            <value>&quot;Sierra Leone&quot;</value>
            <value>&quot;South Africa&quot;</value>
            <value>&quot;Sri Lanka&quot;</value>
            <value>&quot;Sudan&quot;</value>
            <value>&quot;Syria&quot;</value>
            <value>&quot;Tanzania&quot;</value>
            <value>&quot;Togo&quot;</value>
            <value>&quot;Uganda&quot;</value>
            <value>&quot;Ukraine&quot;</value>
            <value>&quot;Yemen&quot;</value>
            <value>&quot;Zambia&quot;</value>
            <value>&quot;Zimbabwe&quot;</value>
          </bin>
        </calculation>
      </column>
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;North Cyprus&quot;' value='&quot;Cyprus&quot;' />
        </semantic-values>
      </column>
      <column caption='F1 (Avg DR.csv)' datatype='integer' name='[F1 (Avg_DR.csv)]' role='measure' type='quantitative' />
      <column caption='F1 (GDP Series.csv)' datatype='integer' name='[F1 (GDP_Series.csv)]' role='measure' type='quantitative' />
      <column caption='F1 (Trust Series.csv)' datatype='integer' name='[F1 (Trust_Series.csv)]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Avg_DR.csv' datatype='table' name='[__tableau_internal_object_id__].[Avg_DR.csv_81DB62E141094E0C9ECCD521C52E46E8]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='GDP_Series.csv' datatype='table' name='[__tableau_internal_object_id__].[GDP_Series.csv_E8B03F222BA24528898960F558AAD6A6]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Score_Series.csv' datatype='table' name='[__tableau_internal_object_id__].[Score_Series.csv_16177F07F7F14F5B94730378A4E8D6E9]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Trust_Series.csv' datatype='table' name='[__tableau_internal_object_id__].[Trust_Series.csv_A0AD50FCCF144EDCB2B4D3F8711EAA52]' role='measure' type='quantitative' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[2015 GDP]' derivation='Sum' name='[sum:2015 GDP:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2015 Score]' derivation='Sum' name='[sum:2015 Score:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2015 Trust]' derivation='Sum' name='[sum:2015 Trust:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2016 GDP]' derivation='Sum' name='[sum:2016 GDP:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2016 Score]' derivation='Sum' name='[sum:2016 Score:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2016 Trust]' derivation='Sum' name='[sum:2016 Trust:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2017 GDP]' derivation='Sum' name='[sum:2017 GDP:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2017 Score]' derivation='Sum' name='[sum:2017 Score:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2017 Trust]' derivation='Sum' name='[sum:2017 Trust:qk]' pivot='key' type='quantitative' />
      <group caption='Action (Country (Trust Series.csv))' hidden='true' name='[Action (Country (Trust Series.csv))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country (Trust_Series.csv)]' />
        </groupfilter>
      </group>
      <group caption='Action (Country)' hidden='true' name='[Action (Country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country]' />
        </groupfilter>
      </group>
      <group caption='Action (Happiness Bracket,Country)' hidden='true' name='[Action (Happiness Bracket,Country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country (clusters)]' />
          <groupfilter function='level-members' level='[Country]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[Country (clusters)]' type='palette'>
            <map to='#57a337'>
              <bucket>&quot;Happy&quot;</bucket>
            </map>
            <map to='#e03426'>
              <bucket>&quot;Unhappy&quot;</bucket>
            </map>
            <map to='#f8b620'>
              <bucket>&quot;Satisfied&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2015 Trust:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2016 Trust:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2017 Trust:qk]&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2017 Score:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2015 Score:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2015 GDP:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2016 GDP:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2017 GDP:qk]&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2016 Score:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[Country (clusters)]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Happy&quot;</bucket>
            <bucket>&quot;Satisfied&quot;</bucket>
            <bucket>&quot;Unhappy&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <analytic-model>
        <name>
          <field name='[AnalyticModel:{f7e5a7a5-cd9d-45b8-8a0c-cbd4d3af0746}]' />
        </name>
        <analytic-model-specifications class='cluster-specifications'>
          <analysis-fields>
            <field name='[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2015 Score:qk]' />
            <field name='[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2016 Score:qk]' />
            <field name='[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2017 Score:qk]' />
          </analysis-fields>
          <filter-fields />
          <lod-fields>
            <field name='[federated.132bzgr0q36ny91b21stw1p7ah76].[none:Country:nk]' />
          </lod-fields>
          <number-of-desired-clusters>0</number-of-desired-clusters>
          <is-dissagregate>false</is-dissagregate>
        </analytic-model-specifications>
        <result-fields />
      </analytic-model>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Avg_DR.csv' id='Avg_DR.csv_81DB62E141094E0C9ECCD521C52E46E8'>
            <properties context=''>
              <relation connection='textscan.07ah1bd048atas1a01ck60kwvcmj' name='Avg_DR.csv' table='[Avg_DR#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='real' name='AvgDR' ordinal='2' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='GDP_Series.csv' id='GDP_Series.csv_E8B03F222BA24528898960F558AAD6A6'>
            <properties context=''>
              <relation connection='textscan.07ah1bd048atas1a01ck60kwvcmj' name='GDP_Series.csv' table='[GDP_Series#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='real' name='2015 GDP' ordinal='2' />
                  <column datatype='real' name='2016 GDP' ordinal='3' />
                  <column datatype='real' name='2017 GDP' ordinal='4' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='Score_Series.csv' id='Score_Series.csv_16177F07F7F14F5B94730378A4E8D6E9'>
            <properties context=''>
              <relation connection='textscan.07ah1bd048atas1a01ck60kwvcmj' name='Score_Series.csv' table='[Score_Series#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='real' name='2015 Score' ordinal='2' />
                  <column datatype='real' name='2016 Score' ordinal='3' />
                  <column datatype='real' name='2017 Score' ordinal='4' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='Trust_Series.csv' id='Trust_Series.csv_A0AD50FCCF144EDCB2B4D3F8711EAA52'>
            <properties context=''>
              <relation connection='textscan.07ah1bd048atas1a01ck60kwvcmj' name='Trust_Series.csv' table='[Trust_Series#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='real' name='2015 Trust' ordinal='2' />
                  <column datatype='real' name='2016 Trust' ordinal='3' />
                  <column datatype='real' name='2017 Trust' ordinal='4' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[Country (Avg_DR.csv)]' />
            </expression>
            <first-end-point object-id='Score_Series.csv_16177F07F7F14F5B94730378A4E8D6E9' />
            <second-end-point object-id='Avg_DR.csv_81DB62E141094E0C9ECCD521C52E46E8' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[Country (GDP_Series.csv)]' />
            </expression>
            <first-end-point object-id='Score_Series.csv_16177F07F7F14F5B94730378A4E8D6E9' />
            <second-end-point object-id='GDP_Series.csv_E8B03F222BA24528898960F558AAD6A6' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[Country (Trust_Series.csv)]' />
            </expression>
            <first-end-point object-id='Score_Series.csv_16177F07F7F14F5B94730378A4E8D6E9' />
            <second-end-point object-id='Trust_Series.csv_A0AD50FCCF144EDCB2B4D3F8711EAA52' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter 1 (generated)' name='[Action2_4942B8667A604202A6D1A5FD66F3C511]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Sheet 2' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 2 (generated)' name='[Action2_D2C4F352FB094BE6B95540293CF0C3BF]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Sheet 1' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 3 (generated)' name='[Action3_A4940C38C89F4700842D6C7934863903]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Sheet 3' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Sheet 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Country Map categorized by Score</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Score_Series' name='federated.132bzgr0q36ny91b21stw1p7ah76' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.132bzgr0q36ny91b21stw1p7ah76'>
            <column datatype='real' name='[2015 Score]' role='measure' type='quantitative' />
            <column datatype='real' name='[2016 Score]' role='measure' type='quantitative' />
            <column datatype='real' name='[2017 Score]' role='measure' type='quantitative' />
            <column caption='Happiness Bracket' datatype='string' name='[Country (clusters)]' parent-model='[AnalyticModel:{f7e5a7a5-cd9d-45b8-8a0c-cbd4d3af0746}]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <calculation class='categorical-bin' column='[Country]' new-bin='true'>
                <bin default-name='false' value='&quot;Happy&quot;'>
                  <value>&quot;Argentina&quot;</value>
                  <value>&quot;Australia&quot;</value>
                  <value>&quot;Austria&quot;</value>
                  <value>&quot;Belgium&quot;</value>
                  <value>&quot;Brazil&quot;</value>
                  <value>&quot;Canada&quot;</value>
                  <value>&quot;Chile&quot;</value>
                  <value>&quot;Colombia&quot;</value>
                  <value>&quot;Costa Rica&quot;</value>
                  <value>&quot;Czech Republic&quot;</value>
                  <value>&quot;Denmark&quot;</value>
                  <value>&quot;Finland&quot;</value>
                  <value>&quot;France&quot;</value>
                  <value>&quot;Germany&quot;</value>
                  <value>&quot;Guatemala&quot;</value>
                  <value>&quot;Iceland&quot;</value>
                  <value>&quot;Ireland&quot;</value>
                  <value>&quot;Israel&quot;</value>
                  <value>&quot;Luxembourg&quot;</value>
                  <value>&quot;Malta&quot;</value>
                  <value>&quot;Mexico&quot;</value>
                  <value>&quot;Netherlands&quot;</value>
                  <value>&quot;New Zealand&quot;</value>
                  <value>&quot;Norway&quot;</value>
                  <value>&quot;Panama&quot;</value>
                  <value>&quot;Qatar&quot;</value>
                  <value>&quot;Saudi Arabia&quot;</value>
                  <value>&quot;Singapore&quot;</value>
                  <value>&quot;Spain&quot;</value>
                  <value>&quot;Sweden&quot;</value>
                  <value>&quot;Switzerland&quot;</value>
                  <value>&quot;Thailand&quot;</value>
                  <value>&quot;United Arab Emirates&quot;</value>
                  <value>&quot;United Kingdom&quot;</value>
                  <value>&quot;United States&quot;</value>
                  <value>&quot;Uruguay&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Satisfied&quot;'>
                  <value>&quot;Algeria&quot;</value>
                  <value>&quot;Azerbaijan&quot;</value>
                  <value>&quot;Bahrain&quot;</value>
                  <value>&quot;Belarus&quot;</value>
                  <value>&quot;Bhutan&quot;</value>
                  <value>&quot;Bolivia&quot;</value>
                  <value>&quot;Bosnia and Herzegovina&quot;</value>
                  <value>&quot;China&quot;</value>
                  <value>&quot;Croatia&quot;</value>
                  <value>&quot;Cyprus&quot;</value>
                  <value>&quot;Dominican Republic&quot;</value>
                  <value>&quot;Ecuador&quot;</value>
                  <value>&quot;El Salvador&quot;</value>
                  <value>&quot;Estonia&quot;</value>
                  <value>&quot;Greece&quot;</value>
                  <value>&quot;Honduras&quot;</value>
                  <value>&quot;Hungary&quot;</value>
                  <value>&quot;Indonesia&quot;</value>
                  <value>&quot;Italy&quot;</value>
                  <value>&quot;Jamaica&quot;</value>
                  <value>&quot;Japan&quot;</value>
                  <value>&quot;Jordan&quot;</value>
                  <value>&quot;Kazakhstan&quot;</value>
                  <value>&quot;Kosovo&quot;</value>
                  <value>&quot;Kuwait&quot;</value>
                  <value>&quot;Kyrgyzstan&quot;</value>
                  <value>&quot;Latvia&quot;</value>
                  <value>&quot;Lebanon&quot;</value>
                  <value>&quot;Libya&quot;</value>
                  <value>&quot;Lithuania&quot;</value>
                  <value>&quot;Macedonia&quot;</value>
                  <value>&quot;Malaysia&quot;</value>
                  <value>&quot;Mauritius&quot;</value>
                  <value>&quot;Moldova&quot;</value>
                  <value>&quot;Mongolia&quot;</value>
                  <value>&quot;Montenegro&quot;</value>
                  <value>&quot;Morocco&quot;</value>
                  <value>&quot;Nicaragua&quot;</value>
                  <value>&quot;Nigeria&quot;</value>
                  <value>&quot;North Cyprus&quot;</value>
                  <value>&quot;Pakistan&quot;</value>
                  <value>&quot;Paraguay&quot;</value>
                  <value>&quot;Peru&quot;</value>
                  <value>&quot;Philippines&quot;</value>
                  <value>&quot;Poland&quot;</value>
                  <value>&quot;Portugal&quot;</value>
                  <value>&quot;Romania&quot;</value>
                  <value>&quot;Russia&quot;</value>
                  <value>&quot;Serbia&quot;</value>
                  <value>&quot;Slovakia&quot;</value>
                  <value>&quot;Slovenia&quot;</value>
                  <value>&quot;South Korea&quot;</value>
                  <value>&quot;Tajikistan&quot;</value>
                  <value>&quot;Trinidad and Tobago&quot;</value>
                  <value>&quot;Tunisia&quot;</value>
                  <value>&quot;Turkey&quot;</value>
                  <value>&quot;Turkmenistan&quot;</value>
                  <value>&quot;Uzbekistan&quot;</value>
                  <value>&quot;Venezuela&quot;</value>
                  <value>&quot;Vietnam&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Unhappy&quot;'>
                  <value>&quot;Afghanistan&quot;</value>
                  <value>&quot;Albania&quot;</value>
                  <value>&quot;Angola&quot;</value>
                  <value>&quot;Armenia&quot;</value>
                  <value>&quot;Bangladesh&quot;</value>
                  <value>&quot;Benin&quot;</value>
                  <value>&quot;Botswana&quot;</value>
                  <value>&quot;Bulgaria&quot;</value>
                  <value>&quot;Burkina Faso&quot;</value>
                  <value>&quot;Burundi&quot;</value>
                  <value>&quot;Cambodia&quot;</value>
                  <value>&quot;Cameroon&quot;</value>
                  <value>&quot;Chad&quot;</value>
                  <value>&quot;Congo (Brazzaville)&quot;</value>
                  <value>&quot;Congo (Kinshasa)&quot;</value>
                  <value>&quot;Egypt&quot;</value>
                  <value>&quot;Ethiopia&quot;</value>
                  <value>&quot;Gabon&quot;</value>
                  <value>&quot;Georgia&quot;</value>
                  <value>&quot;Ghana&quot;</value>
                  <value>&quot;Guinea&quot;</value>
                  <value>&quot;Haiti&quot;</value>
                  <value>&quot;India&quot;</value>
                  <value>&quot;Iran&quot;</value>
                  <value>&quot;Iraq&quot;</value>
                  <value>&quot;Ivory Coast&quot;</value>
                  <value>&quot;Kenya&quot;</value>
                  <value>&quot;Liberia&quot;</value>
                  <value>&quot;Madagascar&quot;</value>
                  <value>&quot;Malawi&quot;</value>
                  <value>&quot;Mali&quot;</value>
                  <value>&quot;Mauritania&quot;</value>
                  <value>&quot;Myanmar&quot;</value>
                  <value>&quot;Nepal&quot;</value>
                  <value>&quot;Niger&quot;</value>
                  <value>&quot;Palestinian Territories&quot;</value>
                  <value>&quot;Rwanda&quot;</value>
                  <value>&quot;Senegal&quot;</value>
                  <value>&quot;Sierra Leone&quot;</value>
                  <value>&quot;South Africa&quot;</value>
                  <value>&quot;Sri Lanka&quot;</value>
                  <value>&quot;Sudan&quot;</value>
                  <value>&quot;Syria&quot;</value>
                  <value>&quot;Tanzania&quot;</value>
                  <value>&quot;Togo&quot;</value>
                  <value>&quot;Uganda&quot;</value>
                  <value>&quot;Ukraine&quot;</value>
                  <value>&quot;Yemen&quot;</value>
                  <value>&quot;Zambia&quot;</value>
                  <value>&quot;Zimbabwe&quot;</value>
                </bin>
              </calculation>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;North Cyprus&quot;' value='&quot;Cyprus&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[2015 Score]' derivation='Sum' name='[sum:2015 Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2016 Score]' derivation='Sum' name='[sum:2016 Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2017 Score]' derivation='Sum' name='[sum:2017 Score:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.132bzgr0q36ny91b21stw1p7ah76].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action3_A4940C38C89F4700842D6C7934863903]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.132bzgr0q36ny91b21stw1p7ah76].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='normal' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.132bzgr0q36ny91b21stw1p7ah76].[none:Country:nk]' />
              <lod column='[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2015 Score:qk]' />
              <lod column='[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2016 Score:qk]' />
              <lod column='[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2017 Score:qk]' />
              <color column='[federated.132bzgr0q36ny91b21stw1p7ah76].[Country (clusters)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#00a70e' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.132bzgr0q36ny91b21stw1p7ah76].[Latitude (generated)]</rows>
        <cols>[federated.132bzgr0q36ny91b21stw1p7ah76].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{D7F94B7B-AC22-4236-8C8C-BB29940E8E22}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Relation between GDP and Trust</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Score_Series' name='federated.132bzgr0q36ny91b21stw1p7ah76' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.132bzgr0q36ny91b21stw1p7ah76'>
            <column caption='2015 Gdp' datatype='real' name='[2015 GDP]' role='measure' type='quantitative' />
            <column datatype='real' name='[2015 Score]' role='measure' type='quantitative' />
            <column datatype='real' name='[2015 Trust]' role='measure' type='quantitative' />
            <column caption='2016 Gdp' datatype='real' name='[2016 GDP]' role='measure' type='quantitative' />
            <column datatype='real' name='[2016 Score]' role='measure' type='quantitative' />
            <column datatype='real' name='[2016 Trust]' role='measure' type='quantitative' />
            <column caption='2017 Gdp' datatype='real' name='[2017 GDP]' role='measure' type='quantitative' />
            <column datatype='real' name='[2017 Score]' role='measure' type='quantitative' />
            <column datatype='real' name='[2017 Trust]' role='measure' type='quantitative' />
            <column caption='Happiness Bracket' datatype='string' name='[Country (clusters)]' parent-model='[AnalyticModel:{f7e5a7a5-cd9d-45b8-8a0c-cbd4d3af0746}]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <calculation class='categorical-bin' column='[Country]' new-bin='true'>
                <bin default-name='false' value='&quot;Happy&quot;'>
                  <value>&quot;Argentina&quot;</value>
                  <value>&quot;Australia&quot;</value>
                  <value>&quot;Austria&quot;</value>
                  <value>&quot;Belgium&quot;</value>
                  <value>&quot;Brazil&quot;</value>
                  <value>&quot;Canada&quot;</value>
                  <value>&quot;Chile&quot;</value>
                  <value>&quot;Colombia&quot;</value>
                  <value>&quot;Costa Rica&quot;</value>
                  <value>&quot;Czech Republic&quot;</value>
                  <value>&quot;Denmark&quot;</value>
                  <value>&quot;Finland&quot;</value>
                  <value>&quot;France&quot;</value>
                  <value>&quot;Germany&quot;</value>
                  <value>&quot;Guatemala&quot;</value>
                  <value>&quot;Iceland&quot;</value>
                  <value>&quot;Ireland&quot;</value>
                  <value>&quot;Israel&quot;</value>
                  <value>&quot;Luxembourg&quot;</value>
                  <value>&quot;Malta&quot;</value>
                  <value>&quot;Mexico&quot;</value>
                  <value>&quot;Netherlands&quot;</value>
                  <value>&quot;New Zealand&quot;</value>
                  <value>&quot;Norway&quot;</value>
                  <value>&quot;Panama&quot;</value>
                  <value>&quot;Qatar&quot;</value>
                  <value>&quot;Saudi Arabia&quot;</value>
                  <value>&quot;Singapore&quot;</value>
                  <value>&quot;Spain&quot;</value>
                  <value>&quot;Sweden&quot;</value>
                  <value>&quot;Switzerland&quot;</value>
                  <value>&quot;Thailand&quot;</value>
                  <value>&quot;United Arab Emirates&quot;</value>
                  <value>&quot;United Kingdom&quot;</value>
                  <value>&quot;United States&quot;</value>
                  <value>&quot;Uruguay&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Satisfied&quot;'>
                  <value>&quot;Algeria&quot;</value>
                  <value>&quot;Azerbaijan&quot;</value>
                  <value>&quot;Bahrain&quot;</value>
                  <value>&quot;Belarus&quot;</value>
                  <value>&quot;Bhutan&quot;</value>
                  <value>&quot;Bolivia&quot;</value>
                  <value>&quot;Bosnia and Herzegovina&quot;</value>
                  <value>&quot;China&quot;</value>
                  <value>&quot;Croatia&quot;</value>
                  <value>&quot;Cyprus&quot;</value>
                  <value>&quot;Dominican Republic&quot;</value>
                  <value>&quot;Ecuador&quot;</value>
                  <value>&quot;El Salvador&quot;</value>
                  <value>&quot;Estonia&quot;</value>
                  <value>&quot;Greece&quot;</value>
                  <value>&quot;Honduras&quot;</value>
                  <value>&quot;Hungary&quot;</value>
                  <value>&quot;Indonesia&quot;</value>
                  <value>&quot;Italy&quot;</value>
                  <value>&quot;Jamaica&quot;</value>
                  <value>&quot;Japan&quot;</value>
                  <value>&quot;Jordan&quot;</value>
                  <value>&quot;Kazakhstan&quot;</value>
                  <value>&quot;Kosovo&quot;</value>
                  <value>&quot;Kuwait&quot;</value>
                  <value>&quot;Kyrgyzstan&quot;</value>
                  <value>&quot;Latvia&quot;</value>
                  <value>&quot;Lebanon&quot;</value>
                  <value>&quot;Libya&quot;</value>
                  <value>&quot;Lithuania&quot;</value>
                  <value>&quot;Macedonia&quot;</value>
                  <value>&quot;Malaysia&quot;</value>
                  <value>&quot;Mauritius&quot;</value>
                  <value>&quot;Moldova&quot;</value>
                  <value>&quot;Mongolia&quot;</value>
                  <value>&quot;Montenegro&quot;</value>
                  <value>&quot;Morocco&quot;</value>
                  <value>&quot;Nicaragua&quot;</value>
                  <value>&quot;Nigeria&quot;</value>
                  <value>&quot;North Cyprus&quot;</value>
                  <value>&quot;Pakistan&quot;</value>
                  <value>&quot;Paraguay&quot;</value>
                  <value>&quot;Peru&quot;</value>
                  <value>&quot;Philippines&quot;</value>
                  <value>&quot;Poland&quot;</value>
                  <value>&quot;Portugal&quot;</value>
                  <value>&quot;Romania&quot;</value>
                  <value>&quot;Russia&quot;</value>
                  <value>&quot;Serbia&quot;</value>
                  <value>&quot;Slovakia&quot;</value>
                  <value>&quot;Slovenia&quot;</value>
                  <value>&quot;South Korea&quot;</value>
                  <value>&quot;Tajikistan&quot;</value>
                  <value>&quot;Trinidad and Tobago&quot;</value>
                  <value>&quot;Tunisia&quot;</value>
                  <value>&quot;Turkey&quot;</value>
                  <value>&quot;Turkmenistan&quot;</value>
                  <value>&quot;Uzbekistan&quot;</value>
                  <value>&quot;Venezuela&quot;</value>
                  <value>&quot;Vietnam&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Unhappy&quot;'>
                  <value>&quot;Afghanistan&quot;</value>
                  <value>&quot;Albania&quot;</value>
                  <value>&quot;Angola&quot;</value>
                  <value>&quot;Armenia&quot;</value>
                  <value>&quot;Bangladesh&quot;</value>
                  <value>&quot;Benin&quot;</value>
                  <value>&quot;Botswana&quot;</value>
                  <value>&quot;Bulgaria&quot;</value>
                  <value>&quot;Burkina Faso&quot;</value>
                  <value>&quot;Burundi&quot;</value>
                  <value>&quot;Cambodia&quot;</value>
                  <value>&quot;Cameroon&quot;</value>
                  <value>&quot;Chad&quot;</value>
                  <value>&quot;Congo (Brazzaville)&quot;</value>
                  <value>&quot;Congo (Kinshasa)&quot;</value>
                  <value>&quot;Egypt&quot;</value>
                  <value>&quot;Ethiopia&quot;</value>
                  <value>&quot;Gabon&quot;</value>
                  <value>&quot;Georgia&quot;</value>
                  <value>&quot;Ghana&quot;</value>
                  <value>&quot;Guinea&quot;</value>
                  <value>&quot;Haiti&quot;</value>
                  <value>&quot;India&quot;</value>
                  <value>&quot;Iran&quot;</value>
                  <value>&quot;Iraq&quot;</value>
                  <value>&quot;Ivory Coast&quot;</value>
                  <value>&quot;Kenya&quot;</value>
                  <value>&quot;Liberia&quot;</value>
                  <value>&quot;Madagascar&quot;</value>
                  <value>&quot;Malawi&quot;</value>
                  <value>&quot;Mali&quot;</value>
                  <value>&quot;Mauritania&quot;</value>
                  <value>&quot;Myanmar&quot;</value>
                  <value>&quot;Nepal&quot;</value>
                  <value>&quot;Niger&quot;</value>
                  <value>&quot;Palestinian Territories&quot;</value>
                  <value>&quot;Rwanda&quot;</value>
                  <value>&quot;Senegal&quot;</value>
                  <value>&quot;Sierra Leone&quot;</value>
                  <value>&quot;South Africa&quot;</value>
                  <value>&quot;Sri Lanka&quot;</value>
                  <value>&quot;Sudan&quot;</value>
                  <value>&quot;Syria&quot;</value>
                  <value>&quot;Tanzania&quot;</value>
                  <value>&quot;Togo&quot;</value>
                  <value>&quot;Uganda&quot;</value>
                  <value>&quot;Ukraine&quot;</value>
                  <value>&quot;Yemen&quot;</value>
                  <value>&quot;Zambia&quot;</value>
                  <value>&quot;Zimbabwe&quot;</value>
                </bin>
              </calculation>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;North Cyprus&quot;' value='&quot;Cyprus&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[2015 GDP]' derivation='Sum' name='[sum:2015 GDP:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2015 Score]' derivation='Sum' name='[sum:2015 Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2015 Trust]' derivation='Sum' name='[sum:2015 Trust:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2016 GDP]' derivation='Sum' name='[sum:2016 GDP:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2016 Score]' derivation='Sum' name='[sum:2016 Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2016 Trust]' derivation='Sum' name='[sum:2016 Trust:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2017 GDP]' derivation='Sum' name='[sum:2017 GDP:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2017 Score]' derivation='Sum' name='[sum:2017 Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2017 Trust]' derivation='Sum' name='[sum:2017 Trust:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.132bzgr0q36ny91b21stw1p7ah76].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2015 GDP:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2015 Trust:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2016 GDP:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2016 Trust:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2017 GDP:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2017 Trust:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.132bzgr0q36ny91b21stw1p7ah76].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2015 GDP:qk]&quot;</bucket>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2015 Trust:qk]&quot;</bucket>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2016 GDP:qk]&quot;</bucket>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2016 Trust:qk]&quot;</bucket>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2017 GDP:qk]&quot;</bucket>
              <bucket>&quot;[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2017 Trust:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.132bzgr0q36ny91b21stw1p7ah76].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action3_A4940C38C89F4700842D6C7934863903]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.132bzgr0q36ny91b21stw1p7ah76].[Action (Happiness Bracket,Country)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_D2C4F352FB094BE6B95540293CF0C3BF]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Country (clusters)]' />
              <groupfilter function='level-members' level='[Country]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.132bzgr0q36ny91b21stw1p7ah76].[none:Country:nk]'>
            <groupfilter function='level-members' level='[none:Country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.132bzgr0q36ny91b21stw1p7ah76].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2015 GDP:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.132bzgr0q36ny91b21stw1p7ah76].[:Measure Names]</column>
            <column>[federated.132bzgr0q36ny91b21stw1p7ah76].[Action (Happiness Bracket,Country)]</column>
            <column>[federated.132bzgr0q36ny91b21stw1p7ah76].[Action (Country)]</column>
            <column>[federated.132bzgr0q36ny91b21stw1p7ah76].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.132bzgr0q36ny91b21stw1p7ah76].[Multiple Values]' field-type='quantitative' range-type='uniform' scope='cols' type='space' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[federated.132bzgr0q36ny91b21stw1p7ah76].[:Measure Names]' value='23' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2015 GDP:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='stroke-color' id='refline0' value='#000000' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.132bzgr0q36ny91b21stw1p7ah76].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.132bzgr0q36ny91b21stw1p7ah76].[none:Country:nk]</rows>
        <cols>([federated.132bzgr0q36ny91b21stw1p7ah76].[:Measure Names] * [federated.132bzgr0q36ny91b21stw1p7ah76].[Multiple Values])</cols>
      </table>
      <simple-id uuid='{A9101903-D0B5-49D5-ACA2-D373DFAD9302}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Average Dystopia Residual</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Score_Series' name='federated.132bzgr0q36ny91b21stw1p7ah76' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.132bzgr0q36ny91b21stw1p7ah76'>
            <column datatype='real' name='[2015 Score]' role='measure' type='quantitative' />
            <column datatype='real' name='[2016 Score]' role='measure' type='quantitative' />
            <column datatype='real' name='[2017 Score]' role='measure' type='quantitative' />
            <column caption='Avg DR' datatype='real' name='[AvgDR]' role='measure' type='quantitative' />
            <column caption='Happiness Bracket' datatype='string' name='[Country (clusters)]' parent-model='[AnalyticModel:{f7e5a7a5-cd9d-45b8-8a0c-cbd4d3af0746}]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <calculation class='categorical-bin' column='[Country]' new-bin='true'>
                <bin default-name='false' value='&quot;Happy&quot;'>
                  <value>&quot;Argentina&quot;</value>
                  <value>&quot;Australia&quot;</value>
                  <value>&quot;Austria&quot;</value>
                  <value>&quot;Belgium&quot;</value>
                  <value>&quot;Brazil&quot;</value>
                  <value>&quot;Canada&quot;</value>
                  <value>&quot;Chile&quot;</value>
                  <value>&quot;Colombia&quot;</value>
                  <value>&quot;Costa Rica&quot;</value>
                  <value>&quot;Czech Republic&quot;</value>
                  <value>&quot;Denmark&quot;</value>
                  <value>&quot;Finland&quot;</value>
                  <value>&quot;France&quot;</value>
                  <value>&quot;Germany&quot;</value>
                  <value>&quot;Guatemala&quot;</value>
                  <value>&quot;Iceland&quot;</value>
                  <value>&quot;Ireland&quot;</value>
                  <value>&quot;Israel&quot;</value>
                  <value>&quot;Luxembourg&quot;</value>
                  <value>&quot;Malta&quot;</value>
                  <value>&quot;Mexico&quot;</value>
                  <value>&quot;Netherlands&quot;</value>
                  <value>&quot;New Zealand&quot;</value>
                  <value>&quot;Norway&quot;</value>
                  <value>&quot;Panama&quot;</value>
                  <value>&quot;Qatar&quot;</value>
                  <value>&quot;Saudi Arabia&quot;</value>
                  <value>&quot;Singapore&quot;</value>
                  <value>&quot;Spain&quot;</value>
                  <value>&quot;Sweden&quot;</value>
                  <value>&quot;Switzerland&quot;</value>
                  <value>&quot;Thailand&quot;</value>
                  <value>&quot;United Arab Emirates&quot;</value>
                  <value>&quot;United Kingdom&quot;</value>
                  <value>&quot;United States&quot;</value>
                  <value>&quot;Uruguay&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Satisfied&quot;'>
                  <value>&quot;Algeria&quot;</value>
                  <value>&quot;Azerbaijan&quot;</value>
                  <value>&quot;Bahrain&quot;</value>
                  <value>&quot;Belarus&quot;</value>
                  <value>&quot;Bhutan&quot;</value>
                  <value>&quot;Bolivia&quot;</value>
                  <value>&quot;Bosnia and Herzegovina&quot;</value>
                  <value>&quot;China&quot;</value>
                  <value>&quot;Croatia&quot;</value>
                  <value>&quot;Cyprus&quot;</value>
                  <value>&quot;Dominican Republic&quot;</value>
                  <value>&quot;Ecuador&quot;</value>
                  <value>&quot;El Salvador&quot;</value>
                  <value>&quot;Estonia&quot;</value>
                  <value>&quot;Greece&quot;</value>
                  <value>&quot;Honduras&quot;</value>
                  <value>&quot;Hungary&quot;</value>
                  <value>&quot;Indonesia&quot;</value>
                  <value>&quot;Italy&quot;</value>
                  <value>&quot;Jamaica&quot;</value>
                  <value>&quot;Japan&quot;</value>
                  <value>&quot;Jordan&quot;</value>
                  <value>&quot;Kazakhstan&quot;</value>
                  <value>&quot;Kosovo&quot;</value>
                  <value>&quot;Kuwait&quot;</value>
                  <value>&quot;Kyrgyzstan&quot;</value>
                  <value>&quot;Latvia&quot;</value>
                  <value>&quot;Lebanon&quot;</value>
                  <value>&quot;Libya&quot;</value>
                  <value>&quot;Lithuania&quot;</value>
                  <value>&quot;Macedonia&quot;</value>
                  <value>&quot;Malaysia&quot;</value>
                  <value>&quot;Mauritius&quot;</value>
                  <value>&quot;Moldova&quot;</value>
                  <value>&quot;Mongolia&quot;</value>
                  <value>&quot;Montenegro&quot;</value>
                  <value>&quot;Morocco&quot;</value>
                  <value>&quot;Nicaragua&quot;</value>
                  <value>&quot;Nigeria&quot;</value>
                  <value>&quot;North Cyprus&quot;</value>
                  <value>&quot;Pakistan&quot;</value>
                  <value>&quot;Paraguay&quot;</value>
                  <value>&quot;Peru&quot;</value>
                  <value>&quot;Philippines&quot;</value>
                  <value>&quot;Poland&quot;</value>
                  <value>&quot;Portugal&quot;</value>
                  <value>&quot;Romania&quot;</value>
                  <value>&quot;Russia&quot;</value>
                  <value>&quot;Serbia&quot;</value>
                  <value>&quot;Slovakia&quot;</value>
                  <value>&quot;Slovenia&quot;</value>
                  <value>&quot;South Korea&quot;</value>
                  <value>&quot;Tajikistan&quot;</value>
                  <value>&quot;Trinidad and Tobago&quot;</value>
                  <value>&quot;Tunisia&quot;</value>
                  <value>&quot;Turkey&quot;</value>
                  <value>&quot;Turkmenistan&quot;</value>
                  <value>&quot;Uzbekistan&quot;</value>
                  <value>&quot;Venezuela&quot;</value>
                  <value>&quot;Vietnam&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Unhappy&quot;'>
                  <value>&quot;Afghanistan&quot;</value>
                  <value>&quot;Albania&quot;</value>
                  <value>&quot;Angola&quot;</value>
                  <value>&quot;Armenia&quot;</value>
                  <value>&quot;Bangladesh&quot;</value>
                  <value>&quot;Benin&quot;</value>
                  <value>&quot;Botswana&quot;</value>
                  <value>&quot;Bulgaria&quot;</value>
                  <value>&quot;Burkina Faso&quot;</value>
                  <value>&quot;Burundi&quot;</value>
                  <value>&quot;Cambodia&quot;</value>
                  <value>&quot;Cameroon&quot;</value>
                  <value>&quot;Chad&quot;</value>
                  <value>&quot;Congo (Brazzaville)&quot;</value>
                  <value>&quot;Congo (Kinshasa)&quot;</value>
                  <value>&quot;Egypt&quot;</value>
                  <value>&quot;Ethiopia&quot;</value>
                  <value>&quot;Gabon&quot;</value>
                  <value>&quot;Georgia&quot;</value>
                  <value>&quot;Ghana&quot;</value>
                  <value>&quot;Guinea&quot;</value>
                  <value>&quot;Haiti&quot;</value>
                  <value>&quot;India&quot;</value>
                  <value>&quot;Iran&quot;</value>
                  <value>&quot;Iraq&quot;</value>
                  <value>&quot;Ivory Coast&quot;</value>
                  <value>&quot;Kenya&quot;</value>
                  <value>&quot;Liberia&quot;</value>
                  <value>&quot;Madagascar&quot;</value>
                  <value>&quot;Malawi&quot;</value>
                  <value>&quot;Mali&quot;</value>
                  <value>&quot;Mauritania&quot;</value>
                  <value>&quot;Myanmar&quot;</value>
                  <value>&quot;Nepal&quot;</value>
                  <value>&quot;Niger&quot;</value>
                  <value>&quot;Palestinian Territories&quot;</value>
                  <value>&quot;Rwanda&quot;</value>
                  <value>&quot;Senegal&quot;</value>
                  <value>&quot;Sierra Leone&quot;</value>
                  <value>&quot;South Africa&quot;</value>
                  <value>&quot;Sri Lanka&quot;</value>
                  <value>&quot;Sudan&quot;</value>
                  <value>&quot;Syria&quot;</value>
                  <value>&quot;Tanzania&quot;</value>
                  <value>&quot;Togo&quot;</value>
                  <value>&quot;Uganda&quot;</value>
                  <value>&quot;Ukraine&quot;</value>
                  <value>&quot;Yemen&quot;</value>
                  <value>&quot;Zambia&quot;</value>
                  <value>&quot;Zimbabwe&quot;</value>
                </bin>
              </calculation>
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;North Cyprus&quot;' value='&quot;Cyprus&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[2015 Score]' derivation='Sum' name='[sum:2015 Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2016 Score]' derivation='Sum' name='[sum:2016 Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2017 Score]' derivation='Sum' name='[sum:2017 Score:qk]' pivot='key' type='quantitative' />
            <column-instance column='[AvgDR]' derivation='Sum' name='[sum:AvgDR:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.132bzgr0q36ny91b21stw1p7ah76].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action2_4942B8667A604202A6D1A5FD66F3C511]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.132bzgr0q36ny91b21stw1p7ah76].[Action (Happiness Bracket,Country)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_D2C4F352FB094BE6B95540293CF0C3BF]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Country (clusters)]' />
              <groupfilter function='level-members' level='[Country]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.132bzgr0q36ny91b21stw1p7ah76].[Action (Happiness Bracket,Country)]</column>
            <column>[federated.132bzgr0q36ny91b21stw1p7ah76].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:AvgDR:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:AvgDR:qk]' />
              <text column='[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:AvgDR:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.132bzgr0q36ny91b21stw1p7ah76].[none:Country:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{F386C83F-AA11-4ED3-9F99-1762B45222A3}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='94064' id='17' param='horz' type-v2='layout-flow' w='99150' x='425' y='4943'>
            <zone h='94064' id='14' param='horz' type-v2='layout-flow' w='86132' x='425' y='4943'>
              <zone h='94064' id='11' param='horz' type-v2='layout-flow' w='86132' x='425' y='4943'>
                <zone h='94064' id='7' param='horz' type-v2='layout-flow' w='86132' x='425' y='4943'>
                  <zone h='94064' id='5' type-v2='layout-basic' w='86132' x='425' y='4943'>
                    <zone h='64759' id='3' name='Sheet 1' w='86132' x='425' y='4943'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='solid' />
                        <format attr='border-width' value='1' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone h='29305' id='9' name='Sheet 2' w='86132' x='425' y='69702'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                  </zone>
                </zone>
              </zone>
            </zone>
            <zone fixed-size='245' h='94064' id='16' is-fixed='true' param='vert' type-v2='layout-flow' w='13018' x='86557' y='4943'>
              <zone h='94064' id='15' name='Sheet 3' w='13018' x='86557' y='4943'>
                <layout-cache fixed-size-h='3812' fixed-size-w='247' type-h='fixed' type-w='fixed' />
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone forceUpdate='true' h='3950' id='22' type-v2='text' w='99150' x='425' y='993'>
            <formatted-text>
              <run fontalignment='1' fontcolor='#000000' fontsize='8'>Ranges of Values     Happiness: 0 - 7.58    GDP: 0 - 1.87    Trust: 0 - 0.55    Avg DR: 0.66 - 3.33</run>
            </formatted-text>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone h='12655' id='8' name='Sheet 1' pane-specification-id='0' param='[federated.132bzgr0q36ny91b21stw1p7ah76].[Country (clusters)]' type-v2='color' w='10308' x='75877' y='5707'>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='background-color' value='#666666' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='950' minheight='950' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='26' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98014' id='25' param='vert' type-v2='layout-flow' w='99150' x='425' y='993'>
                <zone forceUpdate='true' h='3950' id='22' type-v2='text' w='99150' x='425' y='993'>
                  <formatted-text>
                    <run fontalignment='1' fontcolor='#000000' fontsize='8'>Ranges of Values     Happiness: 0 - 7.58    GDP: 0 - 1.87    Trust: 0 - 0.55    Avg DR: 0.66 - 3.33</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='64759' id='3' is-fixed='true' name='Sheet 1' w='86132' x='425' y='4943'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='solid' />
                    <format attr='border-width' value='1' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='12655' id='8' name='Sheet 1' pane-specification-id='0' param='[federated.132bzgr0q36ny91b21stw1p7ah76].[Country (clusters)]' type-v2='color' w='10308' x='75877' y='5707'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                    <format attr='background-color' value='#666666' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='94064' id='15' is-fixed='true' name='Sheet 3' w='13018' x='86557' y='4943'>
                  <layout-cache fixed-size-h='3812' fixed-size-w='247' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='226' h='29305' id='9' is-fixed='true' name='Sheet 2' w='86132' x='425' y='69702'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{94650CA0-A26B-4FD9-B246-0160CC532B04}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.5' show-side-pane='false' source-height='44'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.132bzgr0q36ny91b21stw1p7ah76].[Country (clusters)]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.132bzgr0q36ny91b21stw1p7ah76].[Action (Country)]</field>
            <field>[federated.132bzgr0q36ny91b21stw1p7ah76].[Country (clusters)]</field>
            <field>[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2016 Score:qk]</field>
          </color-one-way>
        </highlight>
        <map-scale-visibility value='0' />
      </viewpoint>
      <simple-id uuid='{14F12D51-8B21-49B6-BA27-9811B5E9721B}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.132bzgr0q36ny91b21stw1p7ah76].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.132bzgr0q36ny91b21stw1p7ah76].[:Measure Names]</field>
            <field>[federated.132bzgr0q36ny91b21stw1p7ah76].[none:Calculation_1784551386325848065:qk]</field>
            <field>[federated.132bzgr0q36ny91b21stw1p7ah76].[none:Country:nk]</field>
            <field>[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:2015 Trust:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{97CA9BBD-06A4-455A-87E5-5B48277BC14E}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='300'>
            <card pane-specification-id='0' param='[federated.132bzgr0q36ny91b21stw1p7ah76].[sum:AvgDR:qk]' type='color' />
          </strip>
          <strip size='300'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.132bzgr0q36ny91b21stw1p7ah76].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{52269F19-9E98-4662-83DC-CECD628EBB96}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Sheet 1'>
          <zoom type='entire-view' />
          <highlight field='[federated.132bzgr0q36ny91b21stw1p7ah76].[Country (clusters)]'>
            <bucket-selection />
          </highlight>
          <map-scale-visibility value='0' />
        </viewpoint>
        <viewpoint name='Sheet 2' />
        <viewpoint name='Sheet 3' />
      </viewpoints>
      <active id='3' />
      <simple-id uuid='{C2B660C8-FB68-4D85-B252-CE6DB223C380}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      phho+wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
      H2AT0qc9boEGAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
